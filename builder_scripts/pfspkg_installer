#!/usr/local/bin/php -q
<?php
/* $Id$ */
/* ========================================================================== */
/*
    pfspkg_installer
    part of pfSense (http://www.pfSense.com)
	Portions  (C) 2008 Scott Ullrich <sullrich@gmail.com>
    Copyright (C) 2007 Daniel S. Haischt <me@daniel.stefan.haischt.name>
    All rights reserved.
                                                                              */
/* ========================================================================== */
/*
    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

     1. Redistributions of source code must retain the above copyright notice,
        this list of conditions and the following disclaimer.

     2. Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.

    THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
    INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
    AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
    POSSIBILITY OF SUCH DAMAGE.
                                                                              */
/* ========================================================================== */

$builder_package_install = true;

require_once("globals.inc");
require_once("config.inc");
require_once("functions.inc");
require_once("pkg-utils.inc");

global $g;

if(!function_exists("read_header")) {
	function read_header($ch, $string) {
	        global $file_size, $fout;
	        $length = strlen($string);
	        $regs = "";
	        ereg("(Content-Length:) (.*)", $string, $regs);
	        if($regs[2] <> "") {
	                $file_size = intval($regs[2]);
	        }
	        ob_flush();
	        return $length;
	}
}

if(!function_exists("download_file_with_progress_bar")) {
	function download_file_with_progress_bar($url_file, $destination_file, $readbody = 'read_body') {
        global $ch, $fout, $file_size, $downloaded;
        $file_size  = 1;
        $downloaded = 1;
        /* open destination file */
        $fout = fopen($destination_file, "wb");

        /*
         *      Originally by Author: Keyvan Minoukadeh
         *      Modified by Scott Ullrich to return Content-Length size
         */

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url_file);
        curl_setopt($ch, CURLOPT_HEADERFUNCTION, 'read_header');
        curl_setopt($ch, CURLOPT_WRITEFUNCTION, "read_body");
        curl_setopt($ch, CURLOPT_NOPROGRESS, '1');
        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, '5');
        curl_setopt($ch, CURLOPT_TIMEOUT, 0);

        curl_exec($ch);
        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        if($fout)
                fclose($fout);
        curl_close($ch);
        return ($http_code == 200) ? true : $http_code;
	}
}

if(!function_exists("update_status")) {
	function update_status($status) {
			echo ">>>{$status}\n";	        
	}
}

if(!function_exists("read_body")) {
	function read_body($ch, $string) {
	        global $fout, $file_size, $downloaded, $sendto, $static_status, $static_output, $lastseen, $console_counter;
	        $length = strlen($string);
	        $downloaded += intval($length);
	        $downloadProgress = round(100 * (1 - $downloaded / $file_size), 0);
	        $downloadProgress = 100 - $downloadProgress;
			$console_counter++;
	        if($lastseen <> $downloadProgress and $downloadProgress < 101) {
				$tostatus = $static_status . $downloadProgress . "%";
				if($console_counter > 19) {
					echo " {$tostatus}";
					$console_counter=0;
				}
				$lastseen = $downloadProgress;
	        }
	        if($fout)
	                fwrite($fout, $string);
	        ob_flush();
	        return $length;
	}
}

// currently not being used
$beInteractive = false;
// holds the PHP include path which will be used to search for PHP scripts
$includePath = "";
// holds a file location of a list file. the file contains a comma separated
// list of pfSense package names.
$listFile = "";
// could be either 'config' or 'install'
$mode = "config";
// hold the value of the dir which represents the final ISO contents
$toDir = getenv("BASEDIR");
// omit JavaScript blurb
$pkg_interface = "console";

// reads input from stdin
function read() {
  $fp = fopen("/dev/stdin", "r");
  $input = fgets($fp, 255);
  fclose($fp);

  return str_replace("\n", "", $input);
}

function genPackageList() {
	global $pkg_info, $g;

	// borrowed from pkg_mgr_install.php	
	$pkg_info = get_pkg_info('all', array('name', 'category', 'website', 'version', 'status', 'descr', 'maintainer', 'required_version'));
	// get package names
	$pkgListA = array_keys($pkg_info);
	// turn names array into a string of comma separated values
	$pkgList = implode(", ", $pkgListA);
	
	print("Available packages:\n");
	print("==================================\n");
	print("{$pkgList}\n\n");
	print("==================================\n");
	
	// get the list of packages that should be installed from stdin	
	print("Please provide a comma separated list of packages that should be added to the {$g['product_name']} installable image:\n");
	// turns the list provided by the user into an array of package names
	$userPkgList = explode(",", read());
	$saneUserPkgList = array();
	
	// try to figure out whether the user provided package names are correct
	foreach ($userPkgList as $package) {
		if(! in_array(trim($package), $pkgListA)) {
			print("Package is not a {$g['product_name']} package: {$package}\n");
		} else {
			$saneUserPkgList[] = $package;
		}
	}

	// finally dump the sane list of package names to a file	
	file_put_contents("/tmp/pkgfile.lst", implode(", ", $saneUserPkgList));
}

// iterate over the cmd line arguments
for ($i = 0; $i < count($argv); $i++) {
	$argument = $argv[$i];
	
	if ($argument == "-i") {
		$beInteractive = true;
	} else if ($argument == "-p") {
		$i++;
		$includePath = $argv[$i];
	} else if ($argument == "-l") {
		$i++;
		$listFile = $argv[$i];
	} else if ($argument == "-m") {
		$i++;
		$mode = $argv[$i];
	}
}

// setup PHP include path if provided
if ($includePath != "") {
        ini_set("include_path", $includePath);
}

print("Custom {$g['product_name']} package installer runs in ${mode} mode.\n");

// setup package list file interactively
if (! file_exists($listFile) && $mode == "config") {
	genPackageList();
	
// package list file already exists
} else if (file_exists($listFile) && $mode == "config") {
	// try to figure out whether the file contains valide contents
	$fileContents = str_replace(' ', '', file_get_contents($listFile));
	$myArray = explode(",", $fileContents);
	
	if (is_array($myArray) && count($myArray) == 0) {
		// empty array
		genPackageList();
	} else if (! is_array($myArray)) {
		// not an array at all
		genPackageList();
	} else {
		print("Found " . count($myArray) . " valid packages within package list file.\n");
	}
}

// install the actual packages using the list file
if (file_exists($listFile) && $mode == "install") {
	
	// load list of packages
	$pkgList = str_replace(' ', '', file_get_contents($listFile));
	// turn list of package names into an array
	$pkgListA = explode(",", $pkgList);
	
	print("Found " . count($pkgListA) . " valid packages within package list file.\n");
	
	// iterate over each list element and install the appropriate package
	foreach ($pkgListA as $pkg) {
		$package = trim($pkg);
		print("Currently installed packages before {$package}: " . count($config["installedpackages"]["package"]) . "\n");
		
		echo ">>> Invoking installer for $package ...\n";
		$status = install_package($package, $pkg_info);
		
		if($status == -1) {
			print("\nInstallation of {$package} FAILED!\n");
		} else {
			print("\nInstallation of {$package} completed.\n");
		}
		
		print("Currently installed packages after {$package}: " . count($config["installedpackages"]["package"]) . "\n");
	}

	$config_from_cf = parse_xml_config("/cf/conf/config.xml", $g["xml_rootobj"]);
	$default_config = parse_xml_config("/conf.default/config.xml", $g["xml_rootobj"]);
	$installedpackages = null;

	if (is_array($config_from_cf["installedpackages"])) {
		$installedpackages =& $config_from_cf["installedpackages"];
	} else if (is_array($default_config["installedpackages"])) {
		$installedpackages =& $default_config["installedpackages"];
	}

	// make sure any of the configs got the installedpackages section
	$config_from_cf["installedpackages"] = $installedpackages;
	$default_config["installedpackages"] = $installedpackages;

	// write configs to file
	file_put_contents("/cf/conf/config.xml", dump_xml_config($config_from_cf, $g["xml_rootobj"]));
	file_put_contents("/conf.default/config.xml", dump_xml_config($default_config, $g["xml_rootobj"]));
}

?>
