Index: kern/subr_taskqueue.c
===================================================================
RCS file: /usr/ncvs/src/sys/kern/subr_taskqueue.c,v
retrieving revision 1.30
diff -u -r1.30 subr_taskqueue.c
--- kern/subr_taskqueue.c	25 Oct 2005 19:29:02 -0000	1.30
+++ kern/subr_taskqueue.c	24 Dec 2005 22:02:31 -0000
@@ -55,8 +55,27 @@
 	struct task		*tq_running;
 	struct mtx		tq_mutex;
 	struct proc		**tq_pproc;
+	int			tq_spin;
 };
 
+static __inline void
+TQ_LOCK(struct taskqueue *tq)
+{
+	if (tq->tq_spin)
+		mtx_lock_spin(&tq->tq_mutex);
+	else
+		mtx_lock(&tq->tq_mutex);
+}
+
+static __inline void
+TQ_UNLOCK(struct taskqueue *tq)
+{
+	if (tq->tq_spin)
+		mtx_unlock_spin(&tq->tq_mutex);
+	else
+		mtx_unlock(&tq->tq_mutex);
+}
+
 static void	init_taskqueue_list(void *data);
 
 static void
@@ -69,10 +88,11 @@
 SYSINIT(taskqueue_list, SI_SUB_INTRINSIC, SI_ORDER_ANY, init_taskqueue_list,
     NULL);
 
-struct taskqueue *
-taskqueue_create(const char *name, int mflags,
+static struct taskqueue *
+_taskqueue_create(const char *name, int mflags,
 		 taskqueue_enqueue_fn enqueue, void *context,
-		 struct proc **pp)
+		 struct proc **pp,
+		 int mtxflags, const char *mtxname)
 {
 	struct taskqueue *queue;
 
@@ -85,7 +105,8 @@
 	queue->tq_enqueue = enqueue;
 	queue->tq_context = context;
 	queue->tq_pproc = pp;
-	mtx_init(&queue->tq_mutex, "taskqueue", NULL, MTX_DEF);
+	queue->tq_spin = (mtxflags & MTX_SPIN) != 0;
+	mtx_init(&queue->tq_mutex, mtxname, NULL, mtxflags);
 
 	mtx_lock(&taskqueue_queues_mutex);
 	STAILQ_INSERT_TAIL(&taskqueue_queues, queue, tq_link);
@@ -94,6 +115,15 @@
 	return queue;
 }
 
+struct taskqueue *
+taskqueue_create(const char *name, int mflags,
+		 taskqueue_enqueue_fn enqueue, void *context,
+		 struct proc **pp)
+{
+	return _taskqueue_create(name, mflags, enqueue, context, pp,
+			MTX_DEF, "taskqueue");
+}
+
 /*
  * Signal a taskqueue thread to terminate.
  */
@@ -106,11 +136,11 @@
 	*pp = NULL;
 	if (p) {
 		wakeup_one(tq);
-		PROC_LOCK(p);		   /* NB: insure we don't miss wakeup */
-		mtx_unlock(&tq->tq_mutex); /* let taskqueue thread run */
+		PROC_LOCK(p);		/* NB: insure we don't miss wakeup */
+		TQ_UNLOCK(tq);		/* let taskqueue thread run */
 		msleep(p, &p->p_mtx, PWAIT, "taskqueue_destroy", 0);
 		PROC_UNLOCK(p);
-		mtx_lock(&tq->tq_mutex);
+		TQ_LOCK(tq);
 	}
 }
 
@@ -122,7 +152,7 @@
 	STAILQ_REMOVE(&taskqueue_queues, queue, taskqueue, tq_link);
 	mtx_unlock(&taskqueue_queues_mutex);
 
-	mtx_lock(&queue->tq_mutex);
+	TQ_LOCK(queue);
 	taskqueue_run(queue);
 	taskqueue_terminate(queue->tq_pproc, queue);
 	mtx_destroy(&queue->tq_mutex);
@@ -140,7 +170,7 @@
 	mtx_lock(&taskqueue_queues_mutex);
 	STAILQ_FOREACH(queue, &taskqueue_queues, tq_link) {
 		if (strcmp(queue->tq_name, name) == 0) {
-			mtx_lock(&queue->tq_mutex);
+			TQ_LOCK(queue);
 			mtx_unlock(&taskqueue_queues_mutex);
 			return queue;
 		}
@@ -155,14 +185,14 @@
 	struct task *ins;
 	struct task *prev;
 
-	mtx_lock(&queue->tq_mutex);
+	TQ_LOCK(queue);
 
 	/*
 	 * Count multiple enqueues.
 	 */
 	if (task->ta_pending) {
 		task->ta_pending++;
-		mtx_unlock(&queue->tq_mutex);
+		TQ_UNLOCK(queue);
 		return 0;
 	}
 
@@ -188,7 +218,7 @@
 	task->ta_pending = 1;
 	queue->tq_enqueue(queue->tq_context);
 
-	mtx_unlock(&queue->tq_mutex);
+	TQ_UNLOCK(queue);
 
 	return 0;
 }
@@ -201,7 +231,7 @@
 
 	owned = mtx_owned(&queue->tq_mutex);
 	if (!owned)
-		mtx_lock(&queue->tq_mutex);
+		TQ_LOCK(queue);
 	while (STAILQ_FIRST(&queue->tq_queue)) {
 		/*
 		 * Carefully remove the first task from the queue and
@@ -212,11 +242,11 @@
 		pending = task->ta_pending;
 		task->ta_pending = 0;
 		queue->tq_running = task;
-		mtx_unlock(&queue->tq_mutex);
+		TQ_UNLOCK(queue);
 
 		task->ta_func(task->ta_context, pending);
 
-		mtx_lock(&queue->tq_mutex);
+		TQ_LOCK(queue);
 		queue->tq_running = NULL;
 		wakeup(task);
 	}
@@ -226,7 +256,7 @@
 	 * on entry, although this opens a race window.
 	 */
 	if (!owned)
-		mtx_unlock(&queue->tq_mutex);
+		TQ_UNLOCK(queue);
 }
 
 void
@@ -234,10 +264,10 @@
 {
 	WITNESS_WARN(WARN_GIANTOK | WARN_SLEEPOK, NULL, "taskqueue_drain");
 
-	mtx_lock(&queue->tq_mutex);
+	TQ_LOCK(queue);
 	while (task->ta_pending != 0 || task == queue->tq_running)
 		msleep(task, &queue->tq_mutex, PWAIT, "-", 0);
-	mtx_unlock(&queue->tq_mutex);
+	TQ_UNLOCK(queue);
 }
 
 static void
@@ -271,7 +301,7 @@
 
 	tqp = arg;
 	tq = *tqp;
-	mtx_lock(&tq->tq_mutex);
+	TQ_LOCK(tq);
 	do {
 		taskqueue_run(tq);
 		msleep(tq, &tq->tq_mutex, PWAIT, "-", 0); 
@@ -279,7 +309,7 @@
 
 	/* rendezvous with thread that asked us to terminate */
 	wakeup_one(tq);
-	mtx_unlock(&tq->tq_mutex);
+	TQ_UNLOCK(tq);
 	kthread_exit(0);
 }
 
@@ -305,80 +335,27 @@
 
 TASKQUEUE_DEFINE_THREAD(thread);
 
-int
-taskqueue_enqueue_fast(struct taskqueue *queue, struct task *task)
+struct taskqueue *
+taskqueue_create_fast(const char *name, int mflags,
+		 taskqueue_enqueue_fn enqueue, void *context,
+		 struct proc **pp)
 {
-	struct task *ins;
-	struct task *prev;
-
-	mtx_lock_spin(&queue->tq_mutex);
-
-	/*
-	 * Count multiple enqueues.
-	 */
-	if (task->ta_pending) {
-		task->ta_pending++;
-		mtx_unlock_spin(&queue->tq_mutex);
-		return 0;
-	}
-
-	/*
-	 * Optimise the case when all tasks have the same priority.
-	 */
-	prev = STAILQ_LAST(&queue->tq_queue, task, ta_link);
-	if (!prev || prev->ta_priority >= task->ta_priority) {
-		STAILQ_INSERT_TAIL(&queue->tq_queue, task, ta_link);
-	} else {
-		prev = 0;
-		for (ins = STAILQ_FIRST(&queue->tq_queue); ins;
-		     prev = ins, ins = STAILQ_NEXT(ins, ta_link))
-			if (ins->ta_priority < task->ta_priority)
-				break;
-
-		if (prev)
-			STAILQ_INSERT_AFTER(&queue->tq_queue, prev, task, ta_link);
-		else
-			STAILQ_INSERT_HEAD(&queue->tq_queue, task, ta_link);
-	}
-
-	task->ta_pending = 1;
-	queue->tq_enqueue(queue->tq_context);
-
-	mtx_unlock_spin(&queue->tq_mutex);
-
-	return 0;
+	return _taskqueue_create(name, mflags, enqueue, context, pp,
+			MTX_SPIN, "fast_taskqueue");
 }
 
-static void
-taskqueue_run_fast(struct taskqueue *queue)
+/* NB: for backwards compatibility */
+int
+taskqueue_enqueue_fast(struct taskqueue *queue, struct task *task)
 {
-	struct task *task;
-	int pending;
-
-	mtx_lock_spin(&queue->tq_mutex);
-	while (STAILQ_FIRST(&queue->tq_queue)) {
-		/*
-		 * Carefully remove the first task from the queue and
-		 * zero its pending count.
-		 */
-		task = STAILQ_FIRST(&queue->tq_queue);
-		STAILQ_REMOVE_HEAD(&queue->tq_queue, ta_link);
-		pending = task->ta_pending;
-		task->ta_pending = 0;
-		mtx_unlock_spin(&queue->tq_mutex);
-
-		task->ta_func(task->ta_context, pending);
-
-		mtx_lock_spin(&queue->tq_mutex);
-	}
-	mtx_unlock_spin(&queue->tq_mutex);
+	return taskqueue_enqueue(queue, task);
 }
 
 struct taskqueue *taskqueue_fast;
 static void	*taskqueue_fast_ih;
 
 static void
-taskqueue_fast_schedule(void *context)
+taskqueue_fast_enqueue(void *context)
 {
 	swi_sched(taskqueue_fast_ih, 0);
 }
@@ -386,31 +363,19 @@
 static void
 taskqueue_fast_run(void *dummy)
 {
-	taskqueue_run_fast(taskqueue_fast);
+	taskqueue_run(taskqueue_fast);
 }
 
 static void
-taskqueue_define_fast(void *arg)
+taskqueue_define_fast(void)
 {
-
-	taskqueue_fast = malloc(sizeof(struct taskqueue), M_TASKQUEUE,
-	    M_NOWAIT | M_ZERO);
-	if (!taskqueue_fast) {
+	taskqueue_fast = taskqueue_create_fast("fast", M_NOWAIT, 
+		taskqueue_fast_enqueue, NULL, NULL);
+	if (taskqueue_fast != NULL) {
+		swi_add(NULL, "Fast task queue", taskqueue_fast_run,
+			NULL, SWI_TQ_FAST, 0, &taskqueue_fast_ih);
+	} else
 		printf("%s: Unable to allocate fast task queue!\n", __func__);
-		return;
-	}
-
-	STAILQ_INIT(&taskqueue_fast->tq_queue);
-	taskqueue_fast->tq_name = "fast";
-	taskqueue_fast->tq_enqueue = taskqueue_fast_schedule;
-	mtx_init(&taskqueue_fast->tq_mutex, "taskqueue_fast", NULL, MTX_SPIN);
-
-	mtx_lock(&taskqueue_queues_mutex);
-	STAILQ_INSERT_TAIL(&taskqueue_queues, taskqueue_fast, tq_link);
-	mtx_unlock(&taskqueue_queues_mutex);
-
-	swi_add(NULL, "Fast taskq", taskqueue_fast_run,
-		NULL, SWI_TQ_FAST, 0, &taskqueue_fast_ih);
 }
 SYSINIT(taskqueue_fast, SI_SUB_CONFIGURE, SI_ORDER_SECOND,
     taskqueue_define_fast, NULL);
Index: sys/taskqueue.h
===================================================================
RCS file: /usr/ncvs/src/sys/sys/taskqueue.h,v
retrieving revision 1.14
diff -u -r1.14 taskqueue.h
--- sys/taskqueue.h	1 May 2005 00:38:11 -0000	1.14
+++ sys/taskqueue.h	24 Dec 2005 22:02:02 -0000
@@ -127,5 +127,8 @@
  */
 TASKQUEUE_DECLARE(fast);
 int	taskqueue_enqueue_fast(struct taskqueue *queue, struct task *task);
+struct taskqueue *taskqueue_create_fast(const char *name, int mflags,
+				    taskqueue_enqueue_fn enqueue,
+				    void *context, struct proc **);
 
 #endif /* !_SYS_TASKQUEUE_H_ */
