--- syslogd.c.orig	Sat Aug  7 04:28:55 2004
+++ syslogd.c	Wed Oct 27 23:36:44 2004
@@ -66,6 +66,7 @@
  *   by Peter da Silva.
  * -u and -v by Harlan Stenn.
  * Priority comparison code by Harlan Stenn.
+ * Ring buffer code by Jeff Wheelhouse.
  */
 
 #define	MAXLINE		1024		/* maximum line length */
@@ -84,6 +85,7 @@
 #include <sys/uio.h>
 #include <sys/un.h>
 #include <sys/time.h>
+#include <sys/mman.h>
 #include <sys/resource.h>
 #include <sys/syslimits.h>
 #include <sys/types.h>
@@ -108,6 +110,7 @@
 #include <utmp.h>
 
 #include "pathnames.h"
+#include "../clog/clog.h"
 #include "ttymsg.h"
 
 #define SYSLOG_NAMES
@@ -122,6 +125,7 @@
 const char	*ConfFile = _PATH_LOGCONF;
 const char	*PidFile = _PATH_LOGPID;
 const char	ctty[] = _PATH_CONSOLE;
+const char  ring_magic[] = "CLOG";
 
 #define	dprintf		if (Debug) printf
 
@@ -174,6 +178,11 @@
 			char	f_pname[MAXPATHLEN];
 			pid_t	f_pid;
 		} f_pipe;
+		struct {
+		  char		f_rname[MAXPATHLEN];
+			struct clog_footer *f_footer;
+			size_t	f_size;
+		} f_ring;
 	} f_un;
 	char	f_prevline[MAXSVLINE];		/* last message logged */
 	char	f_lasttime[16];			/* time of last occurrence */
@@ -252,11 +261,25 @@
 #define F_USERS		5		/* list of users */
 #define F_WALL		6		/* everyone logged on */
 #define F_PIPE		7		/* pipe to program */
+#define F_RING                8               /* ring buffer (circular log) */
 
+/*
 const char *TypeNames[8] = {
 	"UNUSED",	"FILE",		"TTY",		"CONSOLE",
 	"FORW",		"USERS",	"WALL",		"PIPE"
 };
+*/
+
+char  *TypeNames[9] = {
+      "UNUSED",       "FILE",         "TTY",          "CONSOLE",
+      "FORW",         "USERS",        "WALL",         "PIPE",
+      "RING"
+};
+
+/*
+ssize_t       rbwrite __P((struct filed *, char *, size_t));
+ssize_t       rbwritev __P((struct filed *, struct iovec *, int));
+*/
 
 static struct filed *Files;	/* Log files that we write to */
 static struct filed consfile;	/* Console */
@@ -324,6 +347,10 @@
 static int	waitdaemon(int, int, int);
 static void	timedout(int);
 
+ssize_t       rbwrite __P((struct filed *, char *, size_t));
+ssize_t       rbwritev __P((struct filed *, struct iovec *, int));
+
+
 int
 main(int argc, char *argv[])
 {
@@ -991,9 +1018,14 @@
 	}
 }
 
+        ssize_t       rbwrite __P((struct filed *, char *, size_t));
+        ssize_t       rbwritev __P((struct filed *, struct iovec *, int));
+
 static void
 fprintlog(struct filed *f, int flags, const char *msg)
 {
+
+
 	struct iovec iov[7];
 	struct iovec *v;
 	struct addrinfo *r;
@@ -1175,6 +1207,21 @@
 		}
 		break;
 
+	case F_RING:
+		dprintf(" %s\n", f->f_un.f_ring.f_rname);
+		v->iov_base = "\n";
+		v->iov_len = 1;
+		if (rbwritev(f, iov, 7)==-1) {
+			int e = errno;
+			(void)munmap(f->f_un.f_ring.f_footer,sizeof(struct clog_footer));
+			(void)close(f->f_file);
+			f->f_type = F_UNUSED;
+			errno = e;
+			logerror(f->f_un.f_fname);
+		}
+
+		break;
+
 	case F_PIPE:
 		dprintf(" %s\n", f->f_un.f_pipe.f_pname);
 		v->iov_base = lf;
@@ -1488,6 +1535,10 @@
 			}
 			f->f_un.f_pipe.f_pid = 0;
 			break;
+		case F_RING:
+			(void)munmap(f->f_un.f_ring.f_footer,sizeof(struct clog_footer));
+			(void)close(f->f_file);
+			break;
 		}
 		next = f->f_next;
 		if (f->f_program) free(f->f_program);
@@ -1610,6 +1661,10 @@
 				printf("%s", f->f_un.f_forw.f_hname);
 				break;
 
+			case F_RING:
+				printf("%s", f->f_un.f_ring.f_rname);
+				break;
+
 			case F_PIPE:
 				printf("%s", f->f_un.f_pipe.f_pname);
 				break;
@@ -1660,6 +1715,7 @@
 	const char *p, *q;
 	char *bp;
 	char buf[MAXLINE], ebuf[100];
+	struct stat sb;
 
 	dprintf("cfline(\"%s\", f, \"%s\", \"%s\")\n", line, prog, host);
 
@@ -1848,6 +1904,38 @@
 		}
 		break;
 
+  case '%':
+    if ((f->f_file = open(p+1, O_RDWR, 0 )) < 0) {
+			f->f_type = F_UNUSED;
+			logerror(p+1);
+			break;
+		}
+		if (fstat(f->f_file,&sb)<0) {
+			(void)close(f->f_file);
+			f->f_type = F_UNUSED;
+			logerror(p+1);
+			break;
+		}
+		f->f_un.f_ring.f_footer = mmap(NULL,sizeof(struct clog_footer),PROT_READ|PROT_WRITE,MAP_SHARED,f->f_file,sb.st_size-sizeof(struct clog_footer));
+		if (f->f_un.f_ring.f_footer==NULL) {
+			(void)close(f->f_file);
+			f->f_type = F_UNUSED;
+			logerror(p+1);
+			break;
+		}
+		if (memcmp(&(f->f_un.f_ring.f_footer->cf_magic),MAGIC_CONST,4)!=0) {
+			(void)munmap(f->f_un.f_ring.f_footer,sizeof(struct clog_footer));
+			(void)close(f->f_file);
+			f->f_type = F_UNUSED;
+			errno = ENODEV;
+			logerror(p+1);
+			break;
+		}
+		f->f_un.f_ring.f_size = sb.st_size;
+		(void)strcpy(f->f_un.f_ring.f_rname, p + 1);
+		f->f_type = F_RING;
+		break;
+
 	case '|':
 		f->f_un.f_pipe.f_pid = 0;
 		(void)strlcpy(f->f_un.f_fname, p + 1, sizeof(f->f_un.f_fname));
@@ -2478,6 +2566,53 @@
 	struct addrinfo hints, *res, *r;
 	int error, maxs, *s, *socks;
 
+
+
+ssize_t rbwritev(struct filed *f, struct iovec *iov, int iovcnt) {
+	int i;
+	ssize_t out = 0;
+	ssize_t err;
+
+	for(i=0;i<iovcnt;i++) {
+		err = rbwrite(f,iov[i].iov_base,iov[i].iov_len);
+		if (err==-1) return -1;
+		out += err;
+	}
+	return out;
+}
+
+
+ssize_t rbwrite(struct filed *f, char *buf, size_t nbytes) {
+	size_t maxwrite = f->f_un.f_ring.f_footer->cf_max - f->f_un.f_ring.f_footer->cf_next;
+	ssize_t err;
+	ssize_t out = 0;
+
+	f->f_un.f_ring.f_footer->cf_lock = 1;
+	while (nbytes>0) {
+		maxwrite = f->f_un.f_ring.f_footer->cf_max - f->f_un.f_ring.f_footer->cf_next;
+		if (maxwrite>nbytes) maxwrite = nbytes;
+		err = pwrite(f->f_file,buf,maxwrite,f->f_un.f_ring.f_footer->cf_next);
+		if (err==-1) {
+			f->f_un.f_ring.f_footer->cf_lock = 0;
+			return -1;
+		}
+		nbytes -= err;
+		out += err;
+		buf += err;
+		f->f_un.f_ring.f_footer->cf_next += err;
+		if (f->f_un.f_ring.f_footer->cf_next==f->f_un.f_ring.f_footer->cf_max) {
+			f->f_un.f_ring.f_footer->cf_next = 0;
+			f->f_un.f_ring.f_footer->cf_wrap = 1;
+		}
+		
+	}
+			
+	f->f_un.f_ring.f_footer->cf_lock = 0;
+	return out;
+}
+
+
+
 	memset(&hints, 0, sizeof(hints));
 	hints.ai_flags = AI_PASSIVE;
 	hints.ai_family = af;
@@ -2535,4 +2670,48 @@
 		freeaddrinfo(res);
 
 	return (socks);
+}
+
+
+ssize_t rbwritev(struct filed *f, struct iovec *iov, int iovcnt) {
+	int i;
+ 	ssize_t out = 0;
+ 	ssize_t err;
+ 
+ 	for(i=0;i<iovcnt;i++) {
+ 		err = rbwrite(f,iov[i].iov_base,iov[i].iov_len);
+ 		if (err==-1) return -1;
+ 		out += err;
+ 	}
+ 	return out;
+}
+ 
+ 
+ssize_t rbwrite(struct filed *f, char *buf, size_t nbytes) {
+ 	size_t maxwrite = f->f_un.f_ring.f_footer->cf_max - f->f_un.f_ring.f_footer->cf_next;
+ 	ssize_t err;
+ 	ssize_t out = 0;
+ 
+ 	f->f_un.f_ring.f_footer->cf_lock = 1;
+ 	while (nbytes>0) {
+ 		maxwrite = f->f_un.f_ring.f_footer->cf_max - f->f_un.f_ring.f_footer->cf_next;
+ 		if (maxwrite>nbytes) maxwrite = nbytes;
+ 		err = pwrite(f->f_file,buf,maxwrite,f->f_un.f_ring.f_footer->cf_next);
+ 		if (err==-1) {
+ 			f->f_un.f_ring.f_footer->cf_lock = 0;
+ 			return -1;
+ 		}
+ 		nbytes -= err;
+ 		out += err;
+ 		buf += err;
+ 		f->f_un.f_ring.f_footer->cf_next += err;
+ 		if (f->f_un.f_ring.f_footer->cf_next==f->f_un.f_ring.f_footer->cf_max) {
+ 			f->f_un.f_ring.f_footer->cf_next = 0;
+ 			f->f_un.f_ring.f_footer->cf_wrap = 1;
+ 		}
+ 		
+ 	}
+ 			
+ 	f->f_un.f_ring.f_footer->cf_lock = 0;
+	return out;
 }
