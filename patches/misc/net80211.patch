Index: ieee80211.c
===================================================================
RCS file: /usr/ncvs/src/sys/net80211/ieee80211.c,v
retrieving revision 1.22
diff -u -r1.22 ieee80211.c
--- ieee80211.c	10 Aug 2005 16:22:29 -0000	1.22
+++ ieee80211.c	13 Sep 2005 20:50:40 -0000
@@ -233,33 +233,48 @@
 /*
  * Convert MHz frequency to IEEE channel number.
  */
-u_int
+int
 ieee80211_mhz2ieee(u_int freq, u_int flags)
 {
+#define IS_CHAN_IN_PUBLIC_SAFETY_BAND(_c) ((_c) > 4940 && (_c) < 4990)
 	if (flags & IEEE80211_CHAN_2GHZ) {	/* 2GHz band */
 		if (freq == 2484)
 			return 14;
 		if (freq < 2484)
-			return (freq - 2407) / 5;
+			return ((int) freq - 2407) / 5;
 		else
 			return 15 + ((freq - 2512) / 20);
 	} else if (flags & IEEE80211_CHAN_5GHZ) {	/* 5Ghz band */
-		return (freq - 5000) / 5;
+		if (IS_CHAN_IN_PUBLIC_SAFETY_BAND(freq))
+			return ((freq * 10) +
+				(((freq % 5) == 2) ? 5 : 0) - 49400) / 5;
+		if (freq <= 5000)
+			return (freq - 4000) / 5;
+		else
+			return (freq - 5000) / 5;
 	} else {				/* either, guess */
 		if (freq == 2484)
 			return 14;
 		if (freq < 2484)
-			return (freq - 2407) / 5;
-		if (freq < 5000)
-			return 15 + ((freq - 2512) / 20);
+			return ((int) freq - 2407) / 5;
+		if (freq < 5000) {
+			if (IS_CHAN_IN_PUBLIC_SAFETY_BAND(freq))
+				return ((freq * 10) +
+					(((freq % 5) == 2) ? 5 : 0) - 49400)/5;
+			else if (freq > 4900)
+				return (freq - 4000) / 5;
+			else
+				return 15 + ((freq - 2512) / 20);
+		}
 		return (freq - 5000) / 5;
 	}
+#undef IS_CHAN_IN_PUBLIC_SAFETY_BAND
 }
 
 /*
  * Convert channel to IEEE channel number.
  */
-u_int
+int
 ieee80211_chan2ieee(struct ieee80211com *ic, struct ieee80211_channel *c)
 {
 	if (ic->ic_channels <= c && c <= &ic->ic_channels[IEEE80211_CHAN_MAX])
@@ -792,9 +807,11 @@
 	modeflags = chanflags[mode];
 	for (i = 0; i <= IEEE80211_CHAN_MAX; i++) {
 		c = &ic->ic_channels[i];
+		if (c->ic_flags == 0)
+			continue;
 		if (mode == IEEE80211_MODE_AUTO) {
 			/* ignore turbo channels for autoselect */
-			if ((c->ic_flags &~ IEEE80211_CHAN_TURBO) != 0)
+			if ((c->ic_flags & IEEE80211_CHAN_TURBO) == 0)
 				break;
 		} else {
 			if ((c->ic_flags & modeflags) == modeflags)
@@ -813,9 +830,11 @@
 	memset(ic->ic_chan_active, 0, sizeof(ic->ic_chan_active));
 	for (i = 0; i <= IEEE80211_CHAN_MAX; i++) {
 		c = &ic->ic_channels[i];
+		if (c->ic_flags == 0)
+			continue;
 		if (mode == IEEE80211_MODE_AUTO) {
 			/* take anything but pure turbo channels */
-			if ((c->ic_flags &~ IEEE80211_CHAN_TURBO) != 0)
+			if ((c->ic_flags & IEEE80211_CHAN_TURBO) == 0)
 				setbit(ic->ic_chan_active, i);
 		} else {
 			if ((c->ic_flags & modeflags) == modeflags)
Index: ieee80211_var.h
===================================================================
RCS file: /usr/ncvs/src/sys/net80211/ieee80211_var.h,v
retrieving revision 1.30
diff -u -r1.30 ieee80211_var.h
--- ieee80211_var.h	10 Aug 2005 16:22:29 -0000	1.30
+++ ieee80211_var.h	23 Sep 2005 15:10:18 -0000
@@ -286,8 +286,8 @@
 int	ieee80211_rate2media(struct ieee80211com *, int,
 		enum ieee80211_phymode);
 int	ieee80211_media2rate(int);
-u_int	ieee80211_mhz2ieee(u_int, u_int);
-u_int	ieee80211_chan2ieee(struct ieee80211com *, struct ieee80211_channel *);
+int	ieee80211_mhz2ieee(u_int, u_int);
+int	ieee80211_chan2ieee(struct ieee80211com *, struct ieee80211_channel *);
 u_int	ieee80211_ieee2mhz(u_int, u_int);
 int	ieee80211_setmode(struct ieee80211com *, enum ieee80211_phymode);
 enum ieee80211_phymode ieee80211_chan2mode(struct ieee80211com *,
