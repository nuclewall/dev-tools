Index: sys/netinet/ip_carp.c
===================================================================
RCS file: /root/freebsd/repo/src/sys/netinet/ip_carp.c,v
retrieving revision 1.3
diff -u -r1.3 ip_carp.c
--- sys/netinet/ip_carp.c	14 Mar 2011 18:53:29 -0000	1.3
+++ sys/netinet/ip_carp.c	14 Mar 2011 19:18:17 -0000
@@ -127,7 +127,6 @@
 
 	struct callout		 sc_ad_tmo;	/* advertisement timeout */
 	struct callout		 sc_md_tmo;	/* master down timeout */
-	struct callout 		 sc_md6_tmo;	/* master down timeout */
 	
 	LIST_ENTRY(carp_softc)	 sc_next;	/* Interface clue */
 };
@@ -156,23 +155,26 @@
 	int vhif_nvrs;
 
 	struct ifnet 	*vhif_ifp;
-	struct mtx	 vhif_mtx;
+	struct rwlock	 vhif_mtx;
 };
 
 /* Get carp_if from softc. Valid after carp_set_addr{,6}. */
 #define	SC2CIF(sc)		((struct carp_if *)(sc)->sc_carpdev->if_carp)
 
 /* lock per carp_if queue */
-#define	CARP_LOCK_INIT(cif)	mtx_init(&(cif)->vhif_mtx, "carp_if", 	\
-	NULL, MTX_DEF)
-#define	CARP_LOCK_DESTROY(cif)	mtx_destroy(&(cif)->vhif_mtx)
-#define	CARP_LOCK_ASSERT(cif)	mtx_assert(&(cif)->vhif_mtx, MA_OWNED)
-#define	CARP_LOCK(cif)		mtx_lock(&(cif)->vhif_mtx)
-#define	CARP_UNLOCK(cif)	mtx_unlock(&(cif)->vhif_mtx)
-
-#define	CARP_SCLOCK(sc)		mtx_lock(&SC2CIF(sc)->vhif_mtx)
-#define	CARP_SCUNLOCK(sc)	mtx_unlock(&SC2CIF(sc)->vhif_mtx)
-#define	CARP_SCLOCK_ASSERT(sc)	mtx_assert(&SC2CIF(sc)->vhif_mtx, MA_OWNED)
+#define	CARP_LOCK_INIT(cif)	rw_init(&(cif)->vhif_mtx, "carp_if")
+#define	CARP_LOCK_DESTROY(cif)	rw_destroy(&(cif)->vhif_mtx)
+#define	CARP_LOCK_ASSERT(cif)	rw_assert(&(cif)->vhif_mtx, MA_OWNED)
+#define	CARP_RLOCK(cif)		rw_rlock(&(cif)->vhif_mtx)
+#define	CARP_RUNLOCK(cif)	rw_runlock(&(cif)->vhif_mtx)
+#define	CARP_WLOCK(cif)		rw_wlock(&(cif)->vhif_mtx)
+#define	CARP_WUNLOCK(cif)	rw_wunlock(&(cif)->vhif_mtx)
+
+#define	CARP_SCWLOCK(sc)	rw_wlock(&SC2CIF(sc)->vhif_mtx)
+#define	CARP_SCRLOCK(sc)	rw_rlock(&SC2CIF(sc)->vhif_mtx)
+#define	CARP_SCWUNLOCK(sc)	rw_wunlock(&SC2CIF(sc)->vhif_mtx)
+#define	CARP_SCRUNLOCK(sc)	rw_runlock(&SC2CIF(sc)->vhif_mtx)
+#define	CARP_SCLOCK_ASSERT(sc)	rw_assert(&SC2CIF(sc)->vhif_mtx, MA_OWNED)
 
 #define	CARP_LOG(...)	do {				\
 	if (carp_opts[CARPCTL_LOG] > 0)			\
@@ -198,7 +200,7 @@
 		    struct carp_header *);
 static void	carp_send_ad_all(void);
 static void	carp_send_ad(void *);
-static void	carp_send_ad_locked(struct carp_softc *);
+static void	carp_send_ad_locked(struct carp_softc *, int);
 static void	carp_send_arp(struct carp_softc *);
 static void	carp_master_down(void *);
 static void	carp_master_down_locked(struct carp_softc *);
@@ -206,7 +208,7 @@
 static int	carp_looutput(struct ifnet *, struct mbuf *, struct sockaddr *,
     		    struct route *);
 static void	carp_start(struct ifnet *);
-static void	carp_setrun(struct carp_softc *, sa_family_t);
+static void	carp_setrun(struct carp_softc *);
 static void	carp_set_state(struct carp_softc *, int);
 static int	carp_addrcount(struct carp_if *, struct in_ifaddr *, int);
 enum	{ CARP_COUNT_MASTER, CARP_COUNT_RUNNING };
@@ -217,7 +219,6 @@
 static void	carp_carpdev_state_locked(struct carp_if *);
 static void	carp_sc_state_locked(struct carp_softc *);
 #ifdef INET6
-static void	carp_send_na(struct carp_softc *);
 static int	carp_set_addr6(struct carp_softc *, struct sockaddr_in6 *);
 static int	carp_del_addr6(struct carp_softc *, struct sockaddr_in6 *);
 static void	carp_multicast6_cleanup(struct carp_softc *);
@@ -249,9 +250,6 @@
 	struct in6_addr last6, cur6, in6;
 #endif
 
-	if (sc->sc_carpdev)
-		CARP_SCLOCK(sc);
-
 	/* XXX: possible race here */
 
 	/* compute ipad from key */
@@ -314,9 +312,6 @@
 	/* convert ipad to opad */
 	for (i = 0; i < sizeof(sc->sc_pad); i++)
 		sc->sc_pad[i] ^= 0x36 ^ 0x5c;
-
-	if (sc->sc_carpdev)
-		CARP_SCUNLOCK(sc);
 }
 
 static void
@@ -414,7 +409,6 @@
 
 	callout_init(&sc->sc_ad_tmo, CALLOUT_MPSAFE);
 	callout_init(&sc->sc_md_tmo, CALLOUT_MPSAFE);
-	callout_init(&sc->sc_md6_tmo, CALLOUT_MPSAFE);
 	
 	ifp->if_softc = sc;
 	if_initname(ifp, CARP_IFNAME, unit);
@@ -440,8 +434,10 @@
 	struct carp_softc *sc = ifp->if_softc;
 
 	if (sc->sc_carpdev)
-		CARP_SCLOCK(sc);
-	carpdetach(sc, 1);	/* Returns unlocked. */
+		CARP_SCWLOCK(sc);
+	carpdetach(sc, 1);
+	if (sc->sc_carpdev)
+		CARP_SCWUNLOCK(sc);
 
 	mtx_lock(&carp_mtx);
 	LIST_REMOVE(sc, sc_next);
@@ -473,7 +469,6 @@
 
 	callout_stop(&sc->sc_ad_tmo);
 	callout_stop(&sc->sc_md_tmo);
-	callout_stop(&sc->sc_md6_tmo);
 
 	if (sc->sc_suppress)
 		carp_suppress_preempt--;
@@ -485,25 +480,23 @@
 
 	carp_set_state(sc, INIT);
 	SC2IFP(sc)->if_flags &= ~IFF_UP;
-	carp_setrun(sc, 0);
-	if (unlock)
-		carp_multicast_cleanup(sc);
-#ifdef INET6
-	carp_multicast6_cleanup(sc);
-#endif
+	carp_setrun(sc);
 
 	if (sc->sc_carpdev != NULL) {
+		if (unlock)
+			carp_multicast_cleanup(sc);
+#ifdef INET6
+		carp_multicast6_cleanup(sc);
+#endif
 		cif = (struct carp_if *)sc->sc_carpdev->if_carp;
 		CARP_LOCK_ASSERT(cif);
 		TAILQ_REMOVE(&cif->vhif_vrs, sc, sc_list);
 		if (!--cif->vhif_nvrs) {
-			ifpromisc(sc->sc_carpdev, 0);
 			sc->sc_carpdev->if_carp = NULL;
+			sc->sc_carpdev = NULL;
 			CARP_LOCK_DESTROY(cif);
 			free(cif, M_CARP);
-		} else if (unlock)
-			CARP_UNLOCK(cif);
-		sc->sc_carpdev = NULL;
+		}
 	}
 }
 
@@ -520,7 +513,7 @@
 	/*
 	 * XXX: At the end of for() cycle the lock will be destroyed.
 	 */
-	CARP_LOCK(cif);
+	CARP_WLOCK(cif);
 	for (sc = TAILQ_FIRST(&cif->vhif_vrs); sc; sc = nextsc) {
 		nextsc = TAILQ_NEXT(sc, sc_list);
 		carpdetach(sc, 0);
@@ -693,7 +686,7 @@
 	struct timeval sc_tv, ch_tv;
 
 	/* verify that the VHID is valid on the receiving interface */
-	CARP_LOCK(ifp->if_carp);
+	CARP_WLOCK(ifp->if_carp);
 	TAILQ_FOREACH(sc, &((struct carp_if *)ifp->if_carp)->vhif_vrs, sc_list)
 		if (sc->sc_vhid == ch->carp_vhid)
 			break;
@@ -701,7 +694,7 @@
 	if (!sc || !((SC2IFP(sc)->if_flags & IFF_UP) &&
 	    (SC2IFP(sc)->if_drv_flags & IFF_DRV_RUNNING))) {
 		CARPSTATS_INC(carps_badvhid);
-		CARP_UNLOCK(ifp->if_carp);
+		CARP_WUNLOCK(ifp->if_carp);
 		m_freem(m);
 		return;
 	}
@@ -724,7 +717,7 @@
 	if (ch->carp_version != CARP_VERSION) {
 		CARPSTATS_INC(carps_badver);
 		SC2IFP(sc)->if_ierrors++;
-		CARP_UNLOCK(ifp->if_carp);
+		CARP_WUNLOCK(ifp->if_carp);
 		CARP_DEBUG("%s; invalid version %d\n",
 		    SC2IFP(sc)->if_xname,
 		    ch->carp_version);
@@ -736,7 +729,7 @@
 	if (carp_hmac_verify(sc, ch->carp_counter, ch->carp_md)) {
 		CARPSTATS_INC(carps_badauth);
 		SC2IFP(sc)->if_ierrors++;
-		CARP_UNLOCK(ifp->if_carp);
+		CARP_WUNLOCK(ifp->if_carp);
 		CARP_DEBUG("%s: incorrect hash\n", SC2IFP(sc)->if_xname);
 		m_freem(m);
 		return;
@@ -748,11 +741,11 @@
                 if (sc->sc_carpdev->if_flags & IFF_SIMPLEX) {
                         CARPSTATS_INC(carps_badauth);
                         SC2IFP(sc)->if_ierrors++;
-                        CARP_UNLOCK(ifp->if_carp);
+                        CARP_WUNLOCK(ifp->if_carp);
                         CARP_LOG("%s, replay or network loop detected.\n",
 				SC2IFP(sc)->if_xname);
                 } else
-                        CARP_UNLOCK(ifp->if_carp);
+                        CARP_WUNLOCK(ifp->if_carp);
                 m_freem(m);
                 return;
         }
@@ -780,7 +773,7 @@
 			   "(more frequent advertisement received)\n",
 			   SC2IFP(sc)->if_xname);
 			carp_set_state(sc, BACKUP);
-			carp_setrun(sc, 0);
+			carp_setrun(sc);
 			carp_setroute(sc, RTM_DELETE);
 		}
 		break;
@@ -816,11 +809,11 @@
 		 * Otherwise, we reset the counter and wait for the next
 		 * advertisement.
 		 */
-		carp_setrun(sc, af);
+		carp_setrun(sc);
 		break;
 	}
 
-	CARP_UNLOCK(ifp->if_carp);
+	CARP_WUNLOCK(ifp->if_carp);
 
 	m_freem(m);
 	return;
@@ -866,12 +859,12 @@
 	LIST_FOREACH(sc, &carpif_list, sc_next) {
 		if (sc->sc_carpdev == NULL)
 			continue;
-		CARP_SCLOCK(sc);
+		CARP_SCRLOCK(sc);
 		if ((SC2IFP(sc)->if_flags & IFF_UP) &&
 		    (SC2IFP(sc)->if_drv_flags & IFF_DRV_RUNNING) &&
 		     sc->sc_state == MASTER)
-			carp_send_ad_locked(sc);
-		CARP_SCUNLOCK(sc);
+			carp_send_ad_locked(sc, 0);
+		CARP_SCRUNLOCK(sc);
 	}
 	mtx_unlock(&carp_mtx);
 }
@@ -881,13 +874,13 @@
 {
 	struct carp_softc *sc = v;
 
-	CARP_SCLOCK(sc);
-	carp_send_ad_locked(sc);
-	CARP_SCUNLOCK(sc);
+	CARP_SCRLOCK(sc);
+	carp_send_ad_locked(sc, 0);
+	CARP_SCRUNLOCK(sc);
 }
 
 static void
-carp_send_ad_locked(struct carp_softc *sc)
+carp_send_ad_locked(struct carp_softc *sc, int wlocked)
 {
 	struct carp_header ch;
 	struct timeval tv;
@@ -895,7 +888,8 @@
 	struct mbuf *m;
 	int len, advbase, advskew;
 
-	CARP_SCLOCK_ASSERT(sc);
+	if (sc->sc_carpdev)
+		CARP_SCLOCK_ASSERT(sc);
 
 	/* bow out if we've lost our UPness or RUNNINGuiness */
 	if (!((SC2IFP(sc)->if_flags & IFF_UP) &&
@@ -968,20 +962,26 @@
 		SC2IFP(sc)->if_obytes += len;
 		CARPSTATS_INC(carps_opackets);
 
+		if (wlocked) CARP_SCWUNLOCK(sc); else  CARP_SCRUNLOCK(sc);
 		if (ip_output(m, NULL, NULL, IP_RAWOUTPUT, &sc->sc_imo, NULL)) {
+			if (sc && sc->sc_carpdev) {
+				if (wlocked) CARP_SCWLOCK(sc); else  CARP_SCRLOCK(sc);
 			SC2IFP(sc)->if_oerrors++;
 			if (sc->sc_sendad_errors < INT_MAX)
 				sc->sc_sendad_errors++;
 			if (sc->sc_sendad_errors == CARP_SENDAD_MAX_ERRORS) {
 				carp_suppress_preempt++;
 				if (carp_suppress_preempt == 1) {
-					CARP_SCUNLOCK(sc);
+					if (wlocked) CARP_SCWUNLOCK(sc); else  CARP_SCRUNLOCK(sc);
 					carp_send_ad_all();
-					CARP_SCLOCK(sc);
+					if (wlocked) CARP_SCWLOCK(sc); else  CARP_SCRLOCK(sc);
 				}
 			}
 			sc->sc_sendad_success = 0;
+			}
 		} else {
+			if (sc && sc->sc_carpdev) {
+				if (wlocked) CARP_SCWLOCK(sc); else  CARP_SCRLOCK(sc);
 			if (sc->sc_sendad_errors >= CARP_SENDAD_MAX_ERRORS) {
 				if (++sc->sc_sendad_success >=
 				    CARP_SENDAD_MIN_SUCCESS) {
@@ -990,6 +990,7 @@
 				}
 			} else
 				sc->sc_sendad_errors = 0;
+			}
 		}
 	}
 #endif /* INET */
@@ -1045,20 +1046,26 @@
 		SC2IFP(sc)->if_obytes += len;
 		CARPSTATS_INC(carps_opackets6);
 
+		if (wlocked) CARP_SCWUNLOCK(sc); else  CARP_SCRUNLOCK(sc);
 		if (ip6_output(m, NULL, NULL, 0, &sc->sc_im6o, NULL, NULL)) {
+			if (sc && sc->sc_carpdev) {
+				if (wlocked) CARP_SCWLOCK(sc); else  CARP_SCRLOCK(sc);
 			SC2IFP(sc)->if_oerrors++;
 			if (sc->sc_sendad_errors < INT_MAX)
 				sc->sc_sendad_errors++;
 			if (sc->sc_sendad_errors == CARP_SENDAD_MAX_ERRORS) {
 				carp_suppress_preempt++;
 				if (carp_suppress_preempt == 1) {
-					CARP_SCUNLOCK(sc);
+					if (wlocked) CARP_SCWUNLOCK(sc); else  CARP_SCRUNLOCK(sc);
 					carp_send_ad_all();
-					CARP_SCLOCK(sc);
+					if (wlocked) CARP_SCWLOCK(sc); else  CARP_SCRLOCK(sc);
 				}
 			}
 			sc->sc_sendad_success = 0;
+			}
 		} else {
+			if (sc && sc->sc_carpdev) {
+				if (wlocked) CARP_SCWLOCK(sc); else  CARP_SCRLOCK(sc);
 			if (sc->sc_sendad_errors >= CARP_SENDAD_MAX_ERRORS) {
 				if (++sc->sc_sendad_success >=
 				    CARP_SENDAD_MIN_SUCCESS) {
@@ -1067,6 +1074,7 @@
 				}
 			} else
 				sc->sc_sendad_errors = 0;
+			}
 		}
 	}
 #endif /* INET6 */
@@ -1086,39 +1094,35 @@
 carp_send_arp(struct carp_softc *sc)
 {
 	struct ifaddr *ifa;
-
-	TAILQ_FOREACH(ifa, &SC2IFP(sc)->if_addrlist, ifa_list) {
-
-		if (ifa->ifa_addr->sa_family != AF_INET)
-			continue;
-
-/*		arprequest(sc->sc_carpdev, &in, &in, IF_LLADDR(sc->sc_ifp)); */
-		arp_ifinit2(sc->sc_carpdev, ifa, IF_LLADDR(sc->sc_ifp));
-
-		DELAY(1000);	/* XXX */
-	}
-}
-
 #ifdef INET6
-static void
-carp_send_na(struct carp_softc *sc)
-{
-	struct ifaddr *ifa;
 	struct in6_addr *in6;
 	static struct in6_addr mcast = IN6ADDR_LINKLOCAL_ALLNODES_INIT;
+#endif
 
-	TAILQ_FOREACH(ifa, &SC2IFP(sc)->if_addrlist, ifa_list) {
+	if (sc->sc_carpdev == NULL)
+		return;
 
-		if (ifa->ifa_addr->sa_family != AF_INET6)
-			continue;
+	CARP_SCWUNLOCK(sc);
+	IF_ADDR_LOCK(SC2IFP(sc));
+	TAILQ_FOREACH(ifa, &SC2IFP(sc)->if_addrlist, ifa_list) {
+		if (ifa->ifa_addr->sa_family == AF_INET) {
+	/*		arprequest(sc->sc_carpdev, &in, &in, IF_LLADDR(sc->sc_ifp)); */
+			arp_ifinit2(sc->sc_carpdev, ifa, IF_LLADDR(sc->sc_ifp));
+		}
+#ifdef INET6
+		else if (ifa->ifa_addr->sa_family == AF_INET6) {
+			in6 = &ifatoia6(ifa)->ia_addr.sin6_addr;
+			nd6_na_output(sc->sc_carpdev, &mcast, in6,
+			    ND_NA_FLAG_OVERRIDE, 1, NULL);
+		}
+#endif /* INET6 */
 
-		in6 = &ifatoia6(ifa)->ia_addr.sin6_addr;
-		nd6_na_output(sc->sc_carpdev, &mcast, in6,
-		    ND_NA_FLAG_OVERRIDE, 1, NULL);
 		DELAY(1000);	/* XXX */
 	}
+	IF_ADDR_UNLOCK(SC2IFP(sc));
+	if (sc && sc->sc_carpdev)
+		CARP_SCWLOCK(sc);
 }
-#endif /* INET6 */
 
 static int
 carp_addrcount(struct carp_if *cif, struct in_ifaddr *ia, int type)
@@ -1157,7 +1161,7 @@
 	int index, count = 0;
 	struct ifaddr *ifa;
 
-	CARP_LOCK(cif);
+	CARP_RLOCK(cif);
 
 	if (carp_opts[CARPCTL_ARPBALANCE]) {
 		/*
@@ -1170,7 +1174,7 @@
 		count = carp_addrcount(cif, ia, CARP_COUNT_RUNNING);
 		if (count == 0) {
 			/* should never reach this */
-			CARP_UNLOCK(cif);
+			CARP_RUNLOCK(cif);
 			return (0);
 		}
 
@@ -1193,11 +1197,11 @@
 							    MASTER) {
 								*enaddr = IF_LLADDR(vh->sc_ifp);
 								IF_ADDR_UNLOCK(SC2IFP(vh));
-								CARP_UNLOCK(cif);
+								CARP_RUNLOCK(cif);
 								return (1);
 							} else {
 								IF_ADDR_UNLOCK(SC2IFP(vh));
-								CARP_UNLOCK(cif);
+								CARP_RUNLOCK(cif);
 								return (0);
 							}
 						}
@@ -1214,12 +1218,12 @@
 			    ia->ia_ifp == SC2IFP(vh) &&
 			    vh->sc_state == MASTER) {
 				*enaddr = IF_LLADDR(vh->sc_ifp);
-				CARP_UNLOCK(cif);
+				CARP_RUNLOCK(cif);
 				return (1);
 			}
 		}
 	}
-	CARP_UNLOCK(cif);
+	CARP_RUNLOCK(cif);
 	return (0);
 }
 
@@ -1231,7 +1235,7 @@
 	struct carp_softc *vh;
 	struct ifaddr *ifa;
 
-	CARP_LOCK(cif);
+	CARP_RLOCK(cif);
 	TAILQ_FOREACH(vh, &cif->vhif_vrs, sc_list) {
 		IF_ADDR_LOCK(SC2IFP(vh));
 		TAILQ_FOREACH(ifa, &SC2IFP(vh)->if_addrlist, ifa_list) {
@@ -1242,13 +1246,13 @@
 			    vh->sc_state == MASTER) {
 				ifa_ref(ifa);
 				IF_ADDR_UNLOCK(SC2IFP(vh));
-			    	CARP_UNLOCK(cif);
+			    	CARP_RUNLOCK(cif);
 				return (ifa);
 			}
 		}
 		IF_ADDR_UNLOCK(SC2IFP(vh));
 	}
-	CARP_UNLOCK(cif);
+	CARP_RUNLOCK(cif);
 	
 	return (NULL);
 }
@@ -1261,7 +1265,7 @@
 	struct carp_softc *sc;
 	struct ifaddr *ifa;
 
-	CARP_LOCK(cif);
+	CARP_RLOCK(cif);
 	TAILQ_FOREACH(sc, &cif->vhif_vrs, sc_list) {
 		IF_ADDR_LOCK(SC2IFP(sc));
 		TAILQ_FOREACH(ifa, &SC2IFP(sc)->if_addrlist, ifa_list) {
@@ -1275,7 +1279,7 @@
 				if (mtag == NULL) {
 					/* better a bit than nothing */
 					IF_ADDR_UNLOCK(SC2IFP(sc));
-					CARP_UNLOCK(cif);
+					CARP_RUNLOCK(cif);
 					return (IF_LLADDR(sc->sc_ifp));
 				}
 				bcopy(&ifp, (caddr_t)(mtag + 1),
@@ -1283,13 +1287,13 @@
 				m_tag_prepend(m, mtag);
 
 				IF_ADDR_UNLOCK(SC2IFP(sc));
-				CARP_UNLOCK(cif);
+				CARP_RUNLOCK(cif);
 				return (IF_LLADDR(sc->sc_ifp));
 			}
 		}
 		IF_ADDR_UNLOCK(SC2IFP(sc));
 	}
-	CARP_UNLOCK(cif);
+	CARP_RUNLOCK(cif);
 
 	return (NULL);
 }
@@ -1305,17 +1309,17 @@
 	if (ena[0] || ena[1] || ena[2] != 0x5e || ena[3] || ena[4] != 1)
 		return (NULL);
 
-	CARP_LOCK(cif);
+	CARP_RLOCK(cif);
 	TAILQ_FOREACH(vh, &cif->vhif_vrs, sc_list)
 		if ((SC2IFP(vh)->if_flags & IFF_UP) &&
 		    (SC2IFP(vh)->if_drv_flags & IFF_DRV_RUNNING) &&
 		    vh->sc_state == MASTER &&
 		    !bcmp(dhost, IF_LLADDR(vh->sc_ifp), ETHER_ADDR_LEN)) {
-		    	CARP_UNLOCK(cif);
+		    	CARP_RUNLOCK(cif);
 			return (SC2IFP(vh));
 		}
 
-    	CARP_UNLOCK(cif);
+    	CARP_RUNLOCK(cif);
 	return (NULL);
 }
 
@@ -1324,9 +1328,9 @@
 {
 	struct carp_softc *sc = v;
 
-	CARP_SCLOCK(sc);
+	CARP_SCWLOCK(sc);
 	carp_master_down_locked(sc);
-	CARP_SCUNLOCK(sc);
+	CARP_SCWUNLOCK(sc);
 }
 
 static void
@@ -1344,12 +1348,10 @@
 		break;
 	case BACKUP:
 		carp_set_state(sc, MASTER);
-		carp_send_ad_locked(sc);
-		carp_send_arp(sc);
-#ifdef INET6
-		carp_send_na(sc);
-#endif /* INET6 */
-		carp_setrun(sc, 0);
+		carp_send_ad_locked(sc, 1);
+		//if (sc->sc_naddrs || sc->sc_naddrs6)
+			carp_send_arp(sc);
+		carp_setrun(sc);
 		carp_setroute(sc, RTM_ADD);
 		break;
 	}
@@ -1360,7 +1362,7 @@
  * for v4 or v6. If it's set to zero, reset the ones which are already pending.
  */
 static void
-carp_setrun(struct carp_softc *sc, sa_family_t af)
+carp_setrun(struct carp_softc *sc)
 {
 	struct timeval tv;
 
@@ -1372,7 +1374,8 @@
 		CARP_SCLOCK_ASSERT(sc);
 
 	if (SC2IFP(sc)->if_flags & IFF_UP &&
-	    sc->sc_vhid > 0 && (sc->sc_naddrs || sc->sc_naddrs6))
+	    sc->sc_vhid > 0 && (sc->sc_naddrs || sc->sc_naddrs6) &&
+	    sc->sc_carpdev->if_link_state == LINK_STATE_UP)
 		SC2IFP(sc)->if_drv_flags |= IFF_DRV_RUNNING;
 	else {
 		SC2IFP(sc)->if_drv_flags &= ~IFF_DRV_RUNNING;
@@ -1383,48 +1386,26 @@
 	switch (sc->sc_state) {
 	case INIT:
 		if (carp_opts[CARPCTL_PREEMPT] && !carp_suppress_preempt) {
-			carp_send_ad_locked(sc);
-			carp_send_arp(sc);
-#ifdef INET6
-			carp_send_na(sc);
-#endif /* INET6 */
+			carp_send_ad_locked(sc, 1);
+			//if (sc->sc_naddrs || sc->sc_naddrs6)
+				carp_send_arp(sc);
 			CARP_LOG("%s: INIT -> MASTER (preempting)\n",
 			    SC2IFP(sc)->if_xname);
 			carp_set_state(sc, MASTER);
 			carp_setroute(sc, RTM_ADD);
+			break;
 		} else {
 			CARP_LOG("%s: INIT -> BACKUP\n", SC2IFP(sc)->if_xname);
 			carp_set_state(sc, BACKUP);
 			carp_setroute(sc, RTM_DELETE);
-			carp_setrun(sc, 0);
+			/* FALLTHROUGH */
 		}
-		break;
 	case BACKUP:
 		callout_stop(&sc->sc_ad_tmo);
 		tv.tv_sec = 3 * sc->sc_advbase;
 		tv.tv_usec = sc->sc_advskew * 1000000 / 256;
-		switch (af) {
-#ifdef INET
-		case AF_INET:
-			callout_reset(&sc->sc_md_tmo, tvtohz(&tv),
-			    carp_master_down, sc);
-			break;
-#endif /* INET */
-#ifdef INET6
-		case AF_INET6:
-			callout_reset(&sc->sc_md6_tmo, tvtohz(&tv),
-			    carp_master_down, sc);
-			break;
-#endif /* INET6 */
-		default:
-			if (sc->sc_naddrs)
-				callout_reset(&sc->sc_md_tmo, tvtohz(&tv),
-				    carp_master_down, sc);
-			if (sc->sc_naddrs6)
-				callout_reset(&sc->sc_md6_tmo, tvtohz(&tv),
-				    carp_master_down, sc);
-			break;
-		}
+		callout_reset(&sc->sc_md_tmo, tvtohz(&tv),
+		    carp_master_down, sc);
 		break;
 	case MASTER:
 		tv.tv_sec = sc->sc_advbase;
@@ -1486,15 +1467,15 @@
 	int own, error;
 
 	if (sin->sin_addr.s_addr == 0) {
+		if (sc->sc_carpdev)
+			CARP_SCWLOCK(sc);
 		if (!(SC2IFP(sc)->if_flags & IFF_UP))
 			carp_set_state(sc, INIT);
 		if (sc->sc_naddrs)
 			SC2IFP(sc)->if_flags |= IFF_UP;
+		carp_setrun(sc);
 		if (sc->sc_carpdev)
-			CARP_SCLOCK(sc);
-		carp_setrun(sc, 0);
-		if (sc->sc_carpdev)
-			CARP_SCUNLOCK(sc);
+			CARP_SCWUNLOCK(sc);
 		return (0);
 	}
 
@@ -1558,7 +1539,7 @@
 		}
 		
 		CARP_LOCK_INIT(cif);
-		CARP_LOCK(cif);
+		CARP_WLOCK(cif);
 		cif->vhif_ifp = ifp;
 		TAILQ_INIT(&cif->vhif_vrs);
 		ifp->if_carp = cif;
@@ -1567,10 +1548,10 @@
 		struct carp_softc *vr;
 
 		cif = (struct carp_if *)ifp->if_carp;
-		CARP_LOCK(cif);
+		CARP_WLOCK(cif);
 		TAILQ_FOREACH(vr, &cif->vhif_vrs, sc_list)
 			if (vr != sc && vr->sc_vhid == sc->sc_vhid) {
-				CARP_UNLOCK(cif);
+				CARP_WUNLOCK(cif);
 				error = EEXIST;
 				goto cleanup;
 			}
@@ -1609,9 +1590,9 @@
 	if (own)
 		sc->sc_advskew = 0;
 	carp_sc_state_locked(sc);
-	carp_setrun(sc, 0);
+	carp_setrun(sc);
 
-	CARP_UNLOCK(cif);
+	CARP_WUNLOCK(cif);
 	ifa_free(&ia->ia_ifa);	/* XXXRW: should hold reference for softc. */
 
 	return (0);
@@ -1629,9 +1610,10 @@
 
 	if (!--sc->sc_naddrs) {
 		struct carp_if *cif = (struct carp_if *)sc->sc_carpdev->if_carp;
+		struct ifnet *pifp = sc->sc_carpdev;
 		struct ip_moptions *imo = &sc->sc_imo;
 
-		CARP_LOCK(cif);
+		CARP_WLOCK(cif);
 		callout_stop(&sc->sc_ad_tmo);
 		SC2IFP(sc)->if_flags &= ~IFF_UP;
 		SC2IFP(sc)->if_drv_flags &= ~IFF_DRV_RUNNING;
@@ -1641,10 +1623,12 @@
 		TAILQ_REMOVE(&cif->vhif_vrs, sc, sc_list);
 		if (!--cif->vhif_nvrs) {
 			sc->sc_carpdev->if_carp = NULL;
+			sc->sc_carpdev = NULL;
 			CARP_LOCK_DESTROY(cif);
 			free(cif, M_CARP);
+			ifpromisc(pifp, 0);
 		} else {
-			CARP_UNLOCK(cif);
+			CARP_WUNLOCK(cif);
 		}
 	}
 
@@ -1665,15 +1649,15 @@
 	error = 0;
 
 	if (IN6_IS_ADDR_UNSPECIFIED(&sin6->sin6_addr)) {
+		if (sc->sc_carpdev)
+			CARP_SCWLOCK(sc);
 		if (!(SC2IFP(sc)->if_flags & IFF_UP))
 			carp_set_state(sc, INIT);
 		if (sc->sc_naddrs6)
 			SC2IFP(sc)->if_flags |= IFF_UP;
+		carp_setrun(sc);
 		if (sc->sc_carpdev)
-			CARP_SCLOCK(sc);
-		carp_setrun(sc, 0);
-		if (sc->sc_carpdev)
-			CARP_SCUNLOCK(sc);
+			CARP_SCWUNLOCK(sc);
 		return (0);
 	}
 
@@ -1765,7 +1749,7 @@
 		}
 
 		CARP_LOCK_INIT(cif);
-		CARP_LOCK(cif);
+		CARP_WLOCK(cif);
 		cif->vhif_ifp = ifp;
 		TAILQ_INIT(&cif->vhif_vrs);
 		ifp->if_carp = cif;
@@ -1774,10 +1758,10 @@
 		struct carp_softc *vr;
 
 		cif = (struct carp_if *)ifp->if_carp;
-		CARP_LOCK(cif);
+		CARP_WLOCK(cif);
 		TAILQ_FOREACH(vr, &cif->vhif_vrs, sc_list)
 			if (vr != sc && vr->sc_vhid == sc->sc_vhid) {
-				CARP_UNLOCK(cif);
+				CARP_WUNLOCK(cif);
 				error = EINVAL;
 				goto cleanup;
 			}
@@ -1814,9 +1798,9 @@
 	if (own)
 		sc->sc_advskew = 0;
 	carp_sc_state_locked(sc);
-	carp_setrun(sc, 0);
+	carp_setrun(sc);
 
-	CARP_UNLOCK(cif);
+	CARP_WUNLOCK(cif);
 	ifa_free(&ia->ia_ifa);	/* XXXRW: should hold reference for softc. */
 
 	return (0);
@@ -1835,8 +1819,9 @@
 
 	if (!--sc->sc_naddrs6) {
 		struct carp_if *cif = (struct carp_if *)sc->sc_carpdev->if_carp;
+		struct ifnet *pifp = sc->sc_carpdev;
 
-		CARP_LOCK(cif);
+		CARP_WLOCK(cif);
 		callout_stop(&sc->sc_ad_tmo);
 		SC2IFP(sc)->if_flags &= ~IFF_UP;
 		SC2IFP(sc)->if_drv_flags &= ~IFF_DRV_RUNNING;
@@ -1844,11 +1829,13 @@
 		carp_multicast6_cleanup(sc);
 		TAILQ_REMOVE(&cif->vhif_vrs, sc, sc_list);
 		if (!--cif->vhif_nvrs) {
-			CARP_LOCK_DESTROY(cif);
 			sc->sc_carpdev->if_carp = NULL;
+			sc->sc_carpdev = NULL;
+			CARP_LOCK_DESTROY(cif);
 			free(cif, M_CARP);
+			ifpromisc(pifp, 0);
 		} else
-			CARP_UNLOCK(cif);
+			CARP_WUNLOCK(cif);
 	}
 
 	return (error);
@@ -1863,7 +1850,7 @@
 	struct ifaddr *ifa;
 	struct ifreq *ifr;
 	struct ifaliasreq *ifra;
-	int locked = 0, error = 0;
+	int locked = 0, error = 0, needed = 1;
 
 	ifa = (struct ifaddr *)addr;
 	ifra = (struct ifaliasreq *)addr;
@@ -1888,6 +1875,7 @@
 #endif /* INET6 */
 		default:
 			error = EAFNOSUPPORT;
+			needed = 0;
 			break;
 		}
 		break;
@@ -1910,6 +1898,7 @@
 #endif /* INET6 */
 		default:
 			error = EAFNOSUPPORT;
+			needed = 0;
 			break;
 		}
 		break;
@@ -1928,27 +1917,27 @@
 #endif /* INET6 */
 		default:
 			error = EAFNOSUPPORT;
+			needed = 0;
 			break;
 		}
 		break;
 
 	case SIOCSIFFLAGS:
-		if (sc->sc_carpdev) {
-			locked = 1;
-			CARP_SCLOCK(sc);
-		}
+		if (sc->sc_carpdev)
+			CARP_SCWLOCK(sc);
 		if (sc->sc_state != INIT && !(ifr->ifr_flags & IFF_UP)) {
  			callout_stop(&sc->sc_ad_tmo);
  			callout_stop(&sc->sc_md_tmo);
- 			callout_stop(&sc->sc_md6_tmo);
 			if (sc->sc_state == MASTER)
-				carp_send_ad_locked(sc);
+				carp_send_ad_locked(sc, 1);
 			carp_set_state(sc, INIT);
-			carp_setrun(sc, 0);
 		} else if (sc->sc_state == INIT && (ifr->ifr_flags & IFF_UP)) {
 			SC2IFP(sc)->if_flags |= IFF_UP;
-			carp_setrun(sc, 0);
 		}
+		carp_setrun(sc);
+		if (sc->sc_carpdev)
+			CARP_SCWUNLOCK(sc);
+		needed = 0;
 		break;
 
 	case SIOCSVH:
@@ -1960,14 +1949,14 @@
 		error = 1;
 		if (sc->sc_carpdev) {
 			locked = 1;
-			CARP_SCLOCK(sc);
+			CARP_SCWLOCK(sc);
 		}
 		if (sc->sc_state != INIT && carpr.carpr_state != sc->sc_state) {
 			switch (carpr.carpr_state) {
 			case BACKUP:
 				callout_stop(&sc->sc_ad_tmo);
 				carp_set_state(sc, BACKUP);
-				carp_setrun(sc, 0);
+				carp_setrun(sc);
 				carp_setroute(sc, RTM_DELETE);
 				break;
 			case MASTER:
@@ -2021,7 +2010,7 @@
 			error = EINVAL;
 		else {
 			error = 0;
-			carp_setrun(sc, 0);
+			carp_setrun(sc);
 		}
 		break;
 
@@ -2037,16 +2026,20 @@
 			bcopy(sc->sc_key, carpr.carpr_key,
 			    sizeof(carpr.carpr_key));
 		error = copyout(&carpr, ifr->ifr_data, sizeof(carpr));
+		needed = 0;
 		break;
 
 	default:
 		error = EINVAL;
+		needed = 0;
 	}
 
-	if (locked)
-		CARP_SCUNLOCK(sc);
-
-	carp_hmac_prepare(sc);
+	if (needed && sc->sc_carpdev && sc->sc_carpdev->if_carp != NULL) {
+		if (!locked)
+			CARP_SCWLOCK(sc);
+		carp_hmac_prepare(sc);
+		CARP_SCWUNLOCK(sc);
+	}
 
 	return (error);
 }
@@ -2216,9 +2209,9 @@
 {
 	struct carp_if *cif = v;
 
-	CARP_LOCK(cif);
+	CARP_WLOCK(cif);
 	carp_carpdev_state_locked(cif);
-	CARP_UNLOCK(cif);
+	CARP_WUNLOCK(cif);
 }
 
 static void
@@ -2242,22 +2235,22 @@
 		SC2IFP(sc)->if_drv_flags &= ~IFF_DRV_RUNNING;
 		callout_stop(&sc->sc_ad_tmo);
 		callout_stop(&sc->sc_md_tmo);
-		callout_stop(&sc->sc_md6_tmo);
 		carp_set_state(sc, INIT);
-		carp_setrun(sc, 0);
+		carp_setrun(sc);
 		if (!sc->sc_suppress) {
 			carp_suppress_preempt++;
 			if (carp_suppress_preempt == 1) {
-				CARP_SCUNLOCK(sc);
+				CARP_SCWUNLOCK(sc);
 				carp_send_ad_all();
-				CARP_SCLOCK(sc);
+				if (sc && sc->sc_carpdev)
+				CARP_SCWLOCK(sc);
 			}
 		}
 		sc->sc_suppress = 1;
 	} else {
 		SC2IFP(sc)->if_flags |= sc->sc_flags_backup;
 		carp_set_state(sc, INIT);
-		carp_setrun(sc, 0);
+		carp_setrun(sc);
 		if (sc->sc_suppress)
 			carp_suppress_preempt--;
 		sc->sc_suppress = 0;
