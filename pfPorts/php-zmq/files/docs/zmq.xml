<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<phpdoc:classref xml:id="class.zmq" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>The ZMQ class</title>
 <titleabbrev>ZMQ</titleabbrev>

 <partintro>

<!-- {{{ ZMQ intro -->
  <section xml:id="zmq.intro">
   &reftitle.intro;
   <para>

   </para>
  </section>
<!-- }}} -->

  <section xml:id="zmq.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>ZMQ</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>ZMQ</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
    <classsynopsisinfo role="comment">Constants</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.socket-pair">ZMQ::SOCKET_PAIR</varname>
     <initializer>0</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.socket-pub">ZMQ::SOCKET_PUB</varname>
     <initializer>1</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.socket-sub">ZMQ::SOCKET_SUB</varname>
     <initializer>2</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.socket-req">ZMQ::SOCKET_REQ</varname>
     <initializer>3</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.socket-rep">ZMQ::SOCKET_REP</varname>
     <initializer>4</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.socket-xreq">ZMQ::SOCKET_XREQ</varname>
     <initializer>5</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.socket-xrep">ZMQ::SOCKET_XREP</varname>
     <initializer>6</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.socket-upstream">ZMQ::SOCKET_UPSTREAM</varname>
     <initializer>7</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.socket-downstream">ZMQ::SOCKET_DOWNSTREAM</varname>
     <initializer>8</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-swap">ZMQ::SOCKOPT_SWAP</varname>
     <initializer>3</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-affinity">ZMQ::SOCKOPT_AFFINITY</varname>
     <initializer>4</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-identity">ZMQ::SOCKOPT_IDENTITY</varname>
     <initializer>5</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-subscribe">ZMQ::SOCKOPT_SUBSCRIBE</varname>
     <initializer>6</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-unsubscribe">ZMQ::SOCKOPT_UNSUBSCRIBE</varname>
     <initializer>7</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-rate">ZMQ::SOCKOPT_RATE</varname>
     <initializer>8</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-recovery-ivl">ZMQ::SOCKOPT_RECOVERY_IVL</varname>
     <initializer>9</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-mcast-loop">ZMQ::SOCKOPT_MCAST_LOOP</varname>
     <initializer>10</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-sndbuf">ZMQ::SOCKOPT_SNDBUF</varname>
     <initializer>11</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-rcvbuf">ZMQ::SOCKOPT_RCVBUF</varname>
     <initializer>12</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-rcvmore">ZMQ::SOCKOPT_RCVMORE</varname>
     <initializer>13</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.poll-in">ZMQ::POLL_IN</varname>
     <initializer>1</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.poll-out">ZMQ::POLL_OUT</varname>
     <initializer>2</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.mode-noblock">ZMQ::MODE_NOBLOCK</varname>
     <initializer>1</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.mode-sndmore">ZMQ::MODE_SNDMORE</varname>
     <initializer>2</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.err-internal">ZMQ::ERR_INTERNAL</varname>
     <initializer>-99</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.err-eagain">ZMQ::ERR_EAGAIN</varname>
     <initializer>11</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.err-enotsup">ZMQ::ERR_ENOTSUP</varname>
     <initializer>95</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.err-efsm">ZMQ::ERR_EFSM</varname>
     <initializer>156384763</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.err-eterm">ZMQ::ERR_ETERM</varname>
     <initializer>156384765</initializer>
    </fieldsynopsis>
    
    <classsynopsisinfo role="comment">Methods</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.zmq')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
<!-- }}} -->

  </section>
  
<!-- {{{ ZMQ constants -->
  <section xml:id="zmq.constants">
   &reftitle.constants;
   <section xml:id="zmq.constants.types">
    <title>ZMQ Constant Types</title>
    <variablelist>

     <varlistentry xml:id="zmq.constants.socket-pair">
      <term><constant>ZMQ::SOCKET_PAIR</constant></term>
      <listitem>
       <para>Exclusive pair pattern</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.socket-pub">
      <term><constant>ZMQ::SOCKET_PUB</constant></term>
      <listitem>
       <para>Publisher socket</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.socket-sub">
      <term><constant>ZMQ::SOCKET_SUB</constant></term>
      <listitem>
       <para>Subscriber socket</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.socket-req">
      <term><constant>ZMQ::SOCKET_REQ</constant></term>
      <listitem>
       <para>Request socket</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.socket-rep">
      <term><constant>ZMQ::SOCKET_REP</constant></term>
      <listitem>
       <para>Reply socket</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.socket-xreq">
      <term><constant>ZMQ::SOCKET_XREQ</constant></term>
      <listitem>
       <para></para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.socket-xrep">
      <term><constant>ZMQ::SOCKET_XREP</constant></term>
      <listitem>
       <para></para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.socket-upstream">
      <term><constant>ZMQ::SOCKET_UPSTREAM</constant></term>
      <listitem>
       <para>Pipeline upstream socket</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.socket-downstream">
      <term><constant>ZMQ::SOCKET_DOWNSTREAM</constant></term>
      <listitem>
       <para>Pipeline downstream socket</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-swap">
      <term><constant>ZMQ::SOCKOPT_SWAP</constant></term>
      <listitem>
       <para>Set disk offload size (Value: &integer;)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-affinity">
      <term><constant>ZMQ::SOCKOPT_AFFINITY</constant></term>
      <listitem>
       <para> Set I/O thread affinity (Value: &integer;)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-identity">
      <term><constant>ZMQ::SOCKOPT_IDENTITY</constant></term>
      <listitem>
       <para>Set socket identity (Value: &string;)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-subscribe">
      <term><constant>ZMQ::SOCKOPT_SUBSCRIBE</constant></term>
      <listitem>
       <para>Establish message filter. Valid for subscriber socket (Value: &string;)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-unsubscribe">
      <term><constant>ZMQ::SOCKOPT_UNSUBSCRIBE</constant></term>
      <listitem>
       <para>Remove message filter. Valid for subscriber socket (Value: &string;)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-rate">
      <term><constant>ZMQ::SOCKOPT_RATE</constant></term>
      <listitem>
       <para>Set rate for multicast sockets (pgm) (Value: &integer; >= 0)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-recovery-ivl">
      <term><constant>ZMQ::SOCKOPT_RECOVERY_IVL</constant></term>
      <listitem>
       <para> Set multicast recovery interval (Value: &integer; >= 0)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-mcast-loop">
      <term><constant>ZMQ::SOCKOPT_MCAST_LOOP</constant></term>
      <listitem>
       <para> Control multicast loopback (Value: &integer; >= 0)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-sndbuf">
      <term><constant>ZMQ::SOCKOPT_SNDBUF</constant></term>
      <listitem>
       <para>Set kernel transmit buffer size (Value: &integer; >= 0)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-rcvbuf">
      <term><constant>ZMQ::SOCKOPT_RCVBUF</constant></term>
      <listitem>
       <para> Set kernel receive buffer size (Value: &integer; >= 0)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.sockopt-rcvmore">
      <term><constant>ZMQ::SOCKOPT_RCVMORE</constant></term>
      <listitem>
       <para>Receive multi-part messages (Value: &integer;)</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.poll-in">
      <term><constant>ZMQ::POLL_IN</constant></term>
      <listitem>
       <para>Poll for incoming data</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.poll-out">
      <term><constant>ZMQ::POLL_OUT</constant></term>
      <listitem>
       <para>Poll for outgoing data</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.mode-noblock">
      <term><constant>ZMQ::MODE_NOBLOCK</constant></term>
      <listitem>
       <para>Non-blocking operation</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.mode-sndmore">
      <term><constant>ZMQ::MODE_SNDMORE</constant></term>
      <listitem>
       <para>Send multi-part message</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.err-internal">
      <term><constant>ZMQ::ERR_INTERNAL</constant></term>
      <listitem>
       <para>ZMQ extension internal error</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.err-eagain">
      <term><constant>ZMQ::ERR_EAGAIN</constant></term>
      <listitem>
       <para>Implies that the operation would block when MODE_NOBLOCK is used</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.err-enotsup">
      <term><constant>ZMQ::ERR_ENOTSUP</constant></term>
      <listitem>
       <para>The operation is not supported by the socket type</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.err-efsm">
      <term><constant>ZMQ::ERR_EFSM</constant></term>
      <listitem>
       <para>The operation can not be executed because the socket is not in correct state</para>
      </listitem>
     </varlistentry>

     <varlistentry xml:id="zmq.constants.err-eterm">
      <term><constant>ZMQ::ERR_ETERM</constant></term>
      <listitem>
       <para>The context has been terminated</para>
      </listitem>
     </varlistentry>

    </variablelist>
   </section>
  </section>
<!-- }}} -->


 </partintro>

 &reference.zmq.entities.zmq;

</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
