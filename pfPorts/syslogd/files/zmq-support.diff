diff -urN Makefile Makefile
--- Makefile	2011-06-29 14:24:38.452192218 +1200
+++ Makefile	2011-06-29 14:27:47.379193306 +1200
@@ -20,4 +20,7 @@
 
 CFLAGS+= -I%%LOCALBASE%%/include -L%%LOCALBASE%%/lib
 
+CFLAGS+= -DWITH_ZMQ
+LDADD+= -lczmq -lzmq -lpthread -lstdc++
+
 .include <bsd.prog.mk>
diff -urN syslogd.c syslogd.c
--- syslogd.c	2011-07-19 07:41:13.646453076 +1200
+++ syslogd.c	2011-07-19 07:41:26.460496953 +1200
@@ -89,6 +89,7 @@
 #include <sys/syslimits.h>
 #include <sys/types.h>
 #include <sys/mman.h>
+#include <sys/sysctl.h>
 
 #include <netinet/in.h>
 #include <netdb.h>
@@ -121,6 +122,10 @@
 #define SYSLOG_NAMES
 #include <sys/syslog.h>
 
+#ifdef WITH_ZMQ
+#include <czmq.h>
+#endif
+
 const char	*ConfFile = _PATH_LOGCONF;
 const char	*PidFile = _PATH_LOGPID;
 const char	ctty[] = _PATH_CONSOLE;
@@ -194,7 +199,13 @@
 			struct clog_footer *f_footer;
 			size_t	f_size;
 		} f_ring;
+#ifdef WITH_ZMQ
+		char	f_zmqaddr[MAXPATHLEN];
+#endif
 	} f_un;
+#ifdef WITH_ZMQ
+	void	*f_zmq;
+#endif
 	char	f_prevline[MAXSVLINE];		/* last message logged */
 	char	f_lasttime[16];			/* time of last occurrence */
 	char	f_prevhost[MAXHOSTNAMELEN];	/* host from which recd. */
@@ -205,6 +216,7 @@
 	int	f_flags;			/* file-specific flags */
 #define	FFLAG_SYNC 0x01
 #define	FFLAG_NEEDSYNC	0x02
+#define	FFLAG_ZMQDUP	0x03
 };
 
 /*
@@ -273,11 +285,12 @@
 #define F_WALL		6		/* everyone logged on */
 #define F_PIPE		7		/* pipe to program */
 #define F_RING		8		/* ring buffer (circular log) */
+#define F_ZMQ		9		/* send to zmq server */
 
-const char *TypeNames[9] = {
+const char *TypeNames[10] = {
 	"UNUSED",	"FILE",		"TTY",		"CONSOLE",
 	"FORW",		"USERS",	"WALL",		"PIPE",
-	"RING"
+	"RING",		"ZMQ"
 };
 
 static struct filed *Files;	/* Log files that we write to */
@@ -286,6 +299,7 @@
 static int	Debug;		/* debug flag */
 static int	resolve = 1;	/* resolve hostname */
 static char	LocalHostName[MAXHOSTNAMELEN];	/* our hostname */
+static char	LocalHostUUID[64];		/* our UUID */
 static const char *LocalDomain;	/* our local domain name */
 static int	*finet;		/* Internet datagram socket */
 static int	fklog = -1;	/* /dev/klog */
@@ -319,6 +333,10 @@
 
 volatile sig_atomic_t MarkSet, WantDie;
 
+#ifdef WITH_ZMQ
+static zctx_t *zmqctx;
+#endif
+
 static int	allowaddr(char *);
 static void	cfline(const char *, struct filed *,
 		    const char *, const char *);
@@ -511,6 +529,13 @@
 	if (NumAllowed)
 		endservent();
 
+#ifdef WITH_ZMQ
+	/* Allocate our zmq context now, it messes with signals */
+	zmqctx = zctx_new();
+	if (!zmqctx)
+		errx(1, "Could not allocate zmq context");
+#endif
+
 	consfile.f_type = F_CONSOLE;
 	(void)strlcpy(consfile.f_un.f_fname, ctty + sizeof _PATH_DEV - 1,
 	    sizeof(consfile.f_un.f_fname));
@@ -1359,6 +1384,39 @@
 		v->iov_len = 2;
 		wallmsg(f, iov, IOV_SIZE);
 		break;
+	case F_ZMQ:
+#ifdef WITH_ZMQ
+		dprintf(" zmq %s\n", f->f_un.f_zmqaddr);
+		if (f->f_zmq == NULL) {
+			dprintf("ZMQ not connected\n");
+			break;
+		}
+		/* check for local vs remote messages */
+		if (strcasecmp(f->f_prevhost, LocalHostName))
+			l = snprintf(line, sizeof line - 1,
+			    "{\"pri\":%d,\"time\":\"%.15s\",\"msg\":\"%s\","
+			    "\"hostname\":\"%s\",\"uuid\":\"%s\",\"remote\":\"%s\"}",
+			    f->f_prevpri, (char *)iov[0].iov_base,
+			    (char *)iov[5].iov_base, LocalHostName, LocalHostUUID,
+			    f->f_prevhost);
+		else
+			l = snprintf(line, sizeof line - 1,
+			    "{\"pri\":%d,\"time\":\"%.15s\",\"msg\":\"%s\","
+			    "\"hostname\":\"%s\",\"uuid\":\"%s\"}",
+			    f->f_prevpri, (char *)iov[0].iov_base,
+			    (char *)iov[5].iov_base, LocalHostName, LocalHostUUID);
+		if (l < 0)
+			l = 0;
+		else if (l > MAXLINE)
+			l = MAXLINE;
+		line[l] = '\0';
+
+		dprintf("zstr_send(%p, %s)\n", f->f_zmq, line);
+		zstr_send(f->f_zmq, line);
+#else
+		dprintf("ZMQ not available\n");
+#endif
+		break;
 	}
 	f->f_prevcount = 0;
 	free(wmsg);
@@ -1550,6 +1608,9 @@
 	}
 	STAILQ_FOREACH(fx, &funixes, next)
 		(void)unlink(fx->name);
+#ifdef WITH_ZMQ
+	zctx_destroy(&zmqctx);
+#endif
 	pidfile_remove(pfh);
 
 	exit(1);
@@ -1571,6 +1632,7 @@
 	char oldLocalHostName[MAXHOSTNAMELEN];
 	char hostMsg[2*MAXHOSTNAMELEN+40];
 	char bootfileMsg[LINE_MAX];
+	size_t len;
 
 	dprintf("init\n");
 
@@ -1588,6 +1650,10 @@
 	} else {
 		LocalDomain = "";
 	}
+	/* grab the host UUID */
+	len = sizeof(LocalHostUUID) - 1;
+	sysctlbyname("kern.hostuuid", LocalHostUUID, &len, NULL, 0);
+	LocalHostUUID[len] = '\0';
 
 	/*
 	 *  Close all open log files.
@@ -1605,6 +1671,12 @@
 		case F_TTY:
 			(void)close(f->f_file);
 			break;
+#ifdef WITH_ZMQ
+		case F_ZMQ:
+			if (f->f_zmq != NULL && !(f->f_flags & FFLAG_ZMQDUP))
+				zsocket_destroy(zmqctx, f->f_zmq);
+			break;
+#endif
 		case F_PIPE:
 			if (f->f_un.f_pipe.f_pid > 0) {
 				(void)close(f->f_file);
@@ -1726,6 +1798,47 @@
 	/* close the configuration file */
 	(void)fclose(cf);
 
+#ifdef WITH_ZMQ
+	/* open ZMQ server */
+	for (f = Files; f; f = f->f_next) {
+
+		if (f->f_type != F_ZMQ)
+			continue;
+
+		dprintf("ZMQ: initialising line\n");
+		if (f != Files) {
+			struct filed *f2;
+			int dup = 0;
+
+			/* make sure its not already opened */
+			for (f2 = Files; f2 && f2 != f; f2 = f2->f_next) {
+				if (f2->f_zmq != NULL &&
+				    strcmp(f2->f_un.f_zmqaddr, f->f_un.f_zmqaddr) == 0) {
+					/* reuse ZMQ connector */
+					dup = 1;
+					break;
+				}
+			}
+			if (dup) {
+				dprintf("ZMQ: reusing zmq\n");
+				f->f_zmq = f2->f_zmq;
+				f->f_flags |= FFLAG_ZMQDUP;
+				continue;
+			}
+		}
+
+		f->f_zmq = zsocket_new(zmqctx, ZMQ_PUSH);
+		if (f->f_zmq == NULL) {
+			dprintf("ZMQ: zsocket_new failed\n");
+			continue;
+		}
+		/* max 1024 * 1k messages in memory */
+		zsockopt_set_hwm(f->f_zmq, 1024);
+		zsocket_connect(f->f_zmq, f->f_un.f_zmqaddr);
+		dprintf("ZMQ: zsocket_connect(%p, %s)\n", f->f_zmq, f->f_un.f_zmqaddr);
+	}
+#endif
+
 	Initialized = 1;
 
 	if (Debug) {
@@ -1770,6 +1883,11 @@
 				for (i = 0; i < MAXUNAMES && *f->f_un.f_uname[i]; i++)
 					printf("%s, ", f->f_un.f_uname[i]);
 				break;
+#ifdef WITH_ZMQ
+			case F_ZMQ:
+				printf("zmq %s", f->f_un.f_zmqaddr);
+				break;
+#endif
 			}
 			if (f->f_program)
 				printf(" (%s)", f->f_program);
@@ -2065,6 +2183,14 @@
 		f->f_type = F_WALL;
 		break;
 
+#ifdef WITH_ZMQ
+	case '^':
+		(void)strlcpy(f->f_un.f_zmqaddr, p + 1,
+		    sizeof(f->f_un.f_zmqaddr));
+		f->f_type = F_ZMQ;
+		break;
+#endif
+
 	default:
 		for (i = 0; i < MAXUNAMES && *p; i++) {
 			for (q = p; *q && *q != ','; )
